import { NextRequest, NextResponse } from 'next/server';
import { googleSheetsService } from '@/lib/google-sheets';
import { getSession } from '@/lib/auth';
import { calculateInvestmentMetrics } from '@/lib/financial-calculations';

export async function GET(request: NextRequest) {
  try {
    // Check authentication
    const session = await getSession();
    if (!session?.isAuthenticated) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const financialYear = searchParams.get('financialYear');

    const investments = await googleSheetsService.getInvestments(
      financialYear || undefined
    );

    return NextResponse.json({
      success: true,
      data: investments,
    });
  } catch (error) {
    console.error('Error fetching investments:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch investments' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await getSession();
    if (!session?.isAuthenticated) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const investmentData = await request.json();

    // Validate required fields
    if (
      !investmentData.symbol ||
      !investmentData.name ||
      !investmentData.type
    ) {
      return NextResponse.json(
        {
          success: false,
          error: 'Missing required fields: symbol, name, type',
        },
        { status: 400 }
      );
    }

    // Calculate investment metrics
    const baseInvestment = {
      id: '', // Will be generated by service
      symbol: investmentData.symbol,
      name: investmentData.name,
      type: investmentData.type,
      quantity: investmentData.quantity || 0,
      averagePrice:
        investmentData.averagePrice || investmentData.currentPrice || 0,
      currentPrice:
        investmentData.currentPrice || investmentData.averagePrice || 0,
      totalInvestment: 0,
      currentValue: 0,
      gainLoss: 0,
      gainLossPercentage: 0,
      lastUpdated: new Date().toISOString(),
      financialYear: '', // Will be set by service
    };

    const metrics = calculateInvestmentMetrics(baseInvestment);
    const investment = {
      ...baseInvestment,
      ...metrics,
    };

    const createdInvestment =
      await googleSheetsService.createInvestment(investment);

    return NextResponse.json({
      success: true,
      data: createdInvestment,
      message: 'Investment created successfully',
    });
  } catch (error) {
    console.error('Error creating investment:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to create investment' },
      { status: 500 }
    );
  }
}
